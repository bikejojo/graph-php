"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Director {
  id: ID!
  name: String!
  lastname: String!
  created_at: DateTime!
  updated_at: DateTime!

  movies: [Movie!]! @hasMany
}

type Movie {
  id: ID!
  title: String!
  genre: String!
  created_at: DateTime!
  updated_at: DateTime!

  director: Director! @belongsTo
}

type Query {

  directors: [Director!] @all

  director(id: ID! @whereKey): Director @find

  movies: [Movie!] @all

  movie(id: ID! @whereKey): Movie @find

}
#necesito que stas m(utation se vean mas peque√±as y no tan grandes.
type Mutation {
  #login de usuario
  login(email:String!,password:String!): String @field(resolver: "App\\GraphQL\\Mutations\\UsersMutations@login")

  #CRUD DE USERS
  
  #CRUD de directors por clase
  createDirector(name: String!, lastname: String!): Director @field(resolver: "App\\GraphQL\\Mutations\\DirectorsMutations@create")
  updateDirector(id: ID!, name: String!, lastname: String!): Director @field(resolver: "App\\GraphQL\\Mutations\\DirectorsMutations@update")
  deleteDirector(id: ID! @whereKey): Director @field(resolver: "App\\GraphQL\\Mutations\\DirectorsMutations@delete")

  
  createMovie(title: String!, genre: String!, director_id: ID!): Movie @create

  updateMovie(id: ID!, title: String!, genre: String!, director_id: ID!): Movie @update

  deleteMovie(id: ID! @whereKey): Movie @delete

}
 